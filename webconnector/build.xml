<project name="las2peer-web-connector" default="main_jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property environment="env"/>

	<property name="ivy.organisation" value="i5"/>
	<property name="ivy.revision" value="1.0"/>
	<property name="ivy.build.number" value="1"/>
	<property name="ivy.deliver.revision" value="${ivy.revision}"/>
	<property name="ivy.pom.version" value="${ivy.revision}"/>

	<condition property="ivy.las2peer.version" value="${ivy.revision}.${ivy.build.number}"
	           else="${ivy.revision}-SNAPSHOT">
		<isset property="env.LAS2PEER_RELEASE"/>
	</condition>

	<property name="ivy.install.version" value="2.4.0"/>
	<property name="ivy.jar.dir" value="${basedir}/../ivy"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
	<property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml"/>
	<property name="ivy.dep.file" value="${basedir}/ivy.xml"/>
	<property name="ivy.pom_template.file" value="${ivy.jar.dir}/pom_template.xml"/>
	<property name="ant-contrib.jar.file" value="${ivy.jar.dir}/ant-contrib-1.0b3.jar"/>
	<tstamp>
		<format property="ivy.now" pattern="yyyy-MM-dd HH:mm:ss"/>
	</tstamp>

	<property name="src" location="src"/>

	<property name="src.main" location="${src}/main/java"/>
	<property name="src.junit" location="${src}/test/java"/>

	<property name="tmp" location="tmp"/>
	<property name="tmp.classes" location="${tmp}/classes"/>
	<property name="tmp.junit" location="${tmp}/test"/>

	<property name="junit.report" location="${tmp}/test_reports"/>

	<property name="export" location="export"/>
	<property name="export.jars" location="${export}/jars"/>
	<property name="export.doc" location="${export}/javadoc"/>
	<property name="export.junitdoc" location="${export}/junitdoc"/>

	<property name="lib.dir" value="lib"/>

	<!-- external libraries classpath, we don't need sources and javadoc -->
	<path id="classpath">
		<fileset dir="${lib.dir}/">
			<include name="**/*.jar"/>
			<exclude name="**/*sources.jar"/>
			<exclude name="**/*javadoc.jar"/>
		</fileset>
	</path>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar.file}" onerror="failall"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant-contrib.jar.file}" onerror="failall"/>

	<!-- Download Dependencies (IVY) -->

	<target name="download-ivy" unless="skip.download">
		<echo message="installing ivy..."/>
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
		     dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="install-ivy" depends="download-ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
		<ivy:retrieve type="jar, bundle" conf="*" pattern="${lib.dir}/[artifact]-[revision].[ext]"/>
	</target>

	<target name="deploy-local" depends="main_jar" description="--> deploy locally">

		<property name="sn" value="${ivy.deliver.revision}-SNAPSHOT"/>
		<local name="ivy.deliver.revision"/>
		<property name="ivy.deliver.revision" value="${sn}"/>
		<local name="ivy.pom.version"/>
		<property name="ivy.pom.version" value="${sn}"/>

		<ivy:makepom ivyfile="${ivy.dep.file}" templatefile="${ivy.pom_template.file}"
		             pomfile="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.pom"
		             artifactName="${ant.project.name}" artifactPackaging="jar">
		</ivy:makepom>

		<ivy:publish resolver="local" publishivy="true" overwrite="true" forcedeliver="true" status="integration">
			<artifacts pattern="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.[ext]"/>
		</ivy:publish>

	</target>

	<target name="deploy-snapshot" depends="main_jar" description="--> deploy snapshot">

		<property name="sn" value="${ivy.deliver.revision}-SNAPSHOT"/>
		<local name="ivy.deliver.revision"/>
		<property name="ivy.deliver.revision" value="${sn}"/>
		<local name="ivy.pom.version"/>
		<property name="ivy.pom.version" value="${sn}"/>

		<ivy:makepom ivyfile="${ivy.dep.file}" templatefile="${ivy.pom_template.file}"
		             pomfile="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.pom"
		             artifactName="${ant.project.name}" artifactPackaging="jar">
		</ivy:makepom>

		<ivy:publish resolver="acis-snapshots" publishivy="false" overwrite="true" forcedeliver="true"
		             status="integration">
			<artifacts pattern="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.[ext]"/>
		</ivy:publish>

	</target>

	<target name="deploy-release" depends="main_jar" description="--> deploy release">

		<property name="sn" value="${ivy.deliver.revision}.${ivy.build.number}"/>
		<local name="ivy.deliver.revision"/>
		<property name="ivy.deliver.revision" value="${sn}"/>
		<local name="ivy.pom.version"/>
		<property name="ivy.pom.version" value="${sn}"/>

		<ivy:makepom ivyfile="${ivy.dep.file}" pomfile="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.pom"
		             artifactName="${ant.project.name}" artifactPackaging="jar">
		</ivy:makepom>

		<ivy:publish resolver="acis-internal" publishivy="false" overwrite="true" forcedeliver="true" status="release">
			<artifacts pattern="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.[ext]"/>
		</ivy:publish>

	</target>


	<!-- Initialization -->

	<target name="init_general">
		<tstamp/>
		<mkdir dir="${tmp}"/>
		<mkdir dir="${export}"/>
	</target>

	<target name="init_compile" depends="init_general, get_deps">
		<mkdir dir="${tmp.classes}"/>
		<mkdir dir="${tmp.junit}"/>
	</target>

	<target name="init_jars" depends="init_general">
		<mkdir dir="${export.jars}"/>
	</target>

	<target name="init_doc" depends="init_general">
		<mkdir dir="${export.doc}"/>
		<mkdir dir="${export.junitdoc}"/>
	</target>


	<!-- Compilation -->

	<target name="compile_main" depends="init_compile">
		<javac srcdir="${src.main}" destdir="${tmp.classes}" classpathref="classpath" debug="on" encoding="UTF-8"
		       includeantruntime="false">
			<compilerarg value="-XDignore.symbol.file"/> <!-- fix build in JDK8 -->
			<compilerarg line="--add-exports java.base/sun.security.provider=ALL-UNNAMED"/>
			<compilerarg line="--add-exports java.base/sun.security.tools.keytool=ALL-UNNAMED"/>
			<compilerarg line="--add-exports java.base/sun.security.util=ALL-UNNAMED"/>
			<compilerarg line="--add-exports java.base/sun.security.x509=ALL-UNNAMED"/>
		</javac>
		<copy todir="${tmp.classes}">
			<fileset dir="${src.main}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="compile_junit" depends="init_compile, compile_main">
		<javac srcdir="${src.junit}" destdir="${tmp.junit}" classpathref="classpath" classpath="${tmp.classes}"
		       debug="on" encoding="UTF-8" includeantruntime="false"/>
		<copy todir="${tmp.junit}">
			<fileset dir="${src.junit}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<copy todir="${tmp.junit}">
			<fileset dir="resources/"/>
		</copy>
	</target>

	<target name="compile_all" depends="compile_main, compile_junit"/>

	<target name="jars" depends="main_jar"/>
	<target name="junit_jars" depends=""/>
	
	
	<target name="prepare-copy" description="copy file based on condition"
	    depends="prepare-copy-true, prepare-copy-false">
	</target>

	<target name="prepare-copy-true" description="copy file based on condition"
	    if="copy-condition">
	    <echo>Get file based on condition being true</echo>
	    <copy file="${some.dir}/true" todir="." />
	</target>

	<target name="prepare-copy-false" description="copy file based on false condition" 
	    unless="copy-condition">
	    <echo>Get file based on condition being false</echo>
	    <copy file="${some.dir}/false" todir="." />
	</target>

	<target name="checkOS">
	    <condition property="isWindows">
	        <os family="windows" />
	    </condition>

	    <condition property="isLinux">
	        <os family="unix" />
	    </condition>
	</target>	
	<target name="build_frontend" description="--> build the polymer frontend">
        <replaceregexp file="./frontend/src/node-frontend.js"
                       match="subtitle=&quot;v(.*)&quot;"
                       replace="subtitle=&quot;v${ivy.las2peer.version}&quot;"
        />
		
		<echo message="Installing dependencies (if needed) ..."/>
		<exec executable="npm" dir="frontend" failonerror="true">
			<arg value="install"/>
			<arg value="--production"/>
		</exec>
		
        <echo message="Fixing vulnerabilities ..."/>
        <exec executable="npm" dir="frontend" failonerror="true">
            <arg value="audit"/>
            <arg value="fix"/>
        </exec>
    	
		<echo message="Building frontend ..."/>
		<exec executable="npm" dir="frontend" failonerror="true">
			<arg value="run"/>
			<arg value="build"/>
		</exec>
		
		<echo message="Fixing webapp symlink ..."/>
		<exec executable="/bin/bash" failonerror="true">
	    	<arg value="${basedir}/fix_symlink.sh"/>
	  	</exec>
		
	</target>
		

	<target name="main_jar" depends="compile_main, build_frontend">
		<!-- constructs the external libraries classpath name -->
		<pathconvert property="manifest.classpath" refid="classpath" pathsep=" ">
			<mapper>
				<chainedmapper>
					<flattenmapper/>
				</chainedmapper>
			</mapper>
		</pathconvert>
		<jar jarfile="${export.jars}/${ant.project.name}-${ivy.las2peer.version}.jar">
			<fileset dir="${tmp.classes}"/>
			<fileset dir="resources"/>
			<manifest>
				<attribute name="Class-Path" value="${manifest.classpath}"/>
				<attribute name="Implementation-Version" value="${ivy.las2peer.version}"/>
				<attribute name="Implementation-Vendor" value="${ivy.organisation}"/>
				<attribute name="Build-Time" value="${ivy.now}"/>
			</manifest>
		</jar>
	</target>

	<!-- Documentation -->

	<target name="javadoc" depends="java_doc, junit_doc" description="--> javadoc"/>

	<target name="java_doc" depends="init_doc, compile_main">
		<javadoc destdir="${export.doc}" author="true" version="true" use="true" windowtitle="las2peer Documentation"
		         failonerror="yes" encoding="utf8" classpathref="classpath" classpath="${tmp.classes}">
			<packageset dir="${src.main}" defaultexcludes="yes">
				<include name="i5/las2peer/**"/>
			</packageset>
			<arg value="--add-exports"/>
			<arg value="java.base/sun.security.provider=ALL-UNNAMED"/>
			<arg value="--add-exports"/>
			<arg value="java.base/sun.security.tools.keytool=ALL-UNNAMED"/>
			<arg value="--add-exports"/>
			<arg value="java.base/sun.security.util=ALL-UNNAMED"/>
			<arg value="--add-exports"/>
			<arg value="java.base/sun.security.x509=ALL-UNNAMED"/>
		</javadoc>
	</target>

	<target name="junit_doc" depends="init_doc, compile_junit">
		<javadoc destdir="${export.junitdoc}" author="true" version="true" use="true"
		         windowtitle="las2peer Unit Test Documentation" failonerror="yes" encoding="utf8"
		         classpathref="classpath" classpath="${tmp.classes}">
			<packageset dir="${src.junit}" defaultexcludes="yes">
				<include name="i5/las2peer/**"/>
			</packageset>
		</javadoc>
	</target>


	<!-- JUnit Testing -->

	<target name="execute.test">

		<!-- we need to have relative path -->
		<pathconvert property="test.source.relative">
			<fileset file="${test.source.absolute}"/>
			<map from="${src.junit}/" to=""/>
		</pathconvert>

		<pathconvert property="lib.junit" refid="classpath" pathsep=":"/>

		<!-- run one particular test -->
		<junit fork="yes" dir="." haltonerror="yes" haltonfailure="yes" printsummary="yes">

			<classpath>
				<pathelement path="${lib.junit}"/>
				<pathelement path="${tmp.classes}"/>
				<pathelement path="${tmp.junit}"/>
			</classpath>

			<formatter type="plain" usefile="false"/>
			<formatter type="plain"/>

			<batchtest todir="${junit.report}">
				<fileset dir="${src.junit}">
					<filename name="${test.source.relative}"/>
				</fileset>
			</batchtest>
		</junit>

	</target>

	<target name="junit" depends="junit_tests, junit_clean" description="-->execute all junit tests"/>

	<target name="init_junit" depends="init_general">
		<mkdir dir="${junit.report}"/>
	</target>

	<target name="junit_clean">
		<delete dir="${tmp.junit}"/>
	</target>

	<target name="junit_tests" depends="init_junit, junit_jars, compile_all">
		<for threadCount="9" parallel="true" param="test.source.absolute">
			<path>
				<fileset dir="${src.junit}">
					<include name="**/*Test.java"/>
					<exclude name="**/SandboxTest.java"/>
					<exclude name="**/ReplicationTest.java"/>
				</fileset>
			</path>
			<sequential>
				<antcall target="execute.test" inheritall="true">
					<param name="target" value="build"/>
					<param name="test.source.absolute" value="@{test.source.absolute}"/>
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="test_colored" depends="init_general">
		<javac srcdir="${src}" includes="**/ColoredOutput.java,**/TestColoredOutput.java" destdir="${tmp}" debug="on"
		       encoding="UTF-8" includeantruntime="false"/>
		<echo message="Testing colored console output"/>
		<java classname="i5.las2peer.tools.TestColoredOutput" classpath="${tmp}" failonerror="true"/>
	</target>

	<!-- Cleanup -->

	<target name="clean" description="--> clean">
		<delete dir="${tmp}"/>
		<delete dir="${export}"/>
		<delete dir="${lib.dir}"/>
	</target>


	<target name="all" depends="clean, jars, junit, javadoc" description="--> all"/>

</project>
